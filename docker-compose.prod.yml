services:
  moprod-backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
      args:
        BACKEND_TAG: ${BACKEND_TAG}
    image: ${APP_NAME}-backend:${BACKEND_TAG}
    container_name: moprod-backend
    restart: unless-stopped
    environment:
      SERVICE_NAME: ${APP_NAME}-backend
      SERVICE_TAGS: prod
      NODE_ENV: ${NODE_ENV}
      DB_CONNECTION: pgsql
      DB_HOST: moprod-postgres
      DB_PORT: ${DB_PORT}
      DB_DATABASE: ${DB_DATABASE}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
    working_dir: /app
    ports:
      - "${BACKEND_PORT}:3000"
    networks:
      - moprod-network
    env_file:
      - .env.prod
    depends_on:
      - moprod-postgres

  moprod-postgres:
    image: postgres:${POSTGRES_TAG}
    container_name: moprod-postgres
    restart: unless-stopped
    ports:
      - "${DB_PORT}:5432"
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - ./data/postgres/data:/var/lib/postgresql/data
    networks:
      - moprod-network
    env_file:
      - .env.prod

  moprod-frontend:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile
      args:
        FRONTEND_TAG: ${FRONTEND_TAG}
    image: ${APP_NAME}-frontend:${FRONTEND_TAG}
    container_name: moprod-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT}:3000"
    environment:
      NODE_ENV: ${NODE_ENV}
    working_dir: /usr/src/app
    networks:
      - moprod-network
    env_file:
      - .env.prod

networks:
  moprod-network:
    name: moprod-network
    driver: bridge
